import random

CLUBS = "\u2663"
SPADES = "\u2660"
HEARTS = "\u2665"
DIAMONDS = "\u2666"
trump = CLUBS
lead = ""

## full deck
DECK = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9", f"{SPADES}A", f"{SPADES}K",
        f"{SPADES}Q", f"{SPADES}J", f"{SPADES}10", f"{SPADES}9", f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}J",
        f"{HEARTS}10", f"{HEARTS}9", f"{DIAMONDS}A", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10",
        f"{DIAMONDS}9"]
## list of aces
DECK_ACE = [f"{CLUBS}A", f"{SPADES}A", f"{HEARTS}A", f"{DIAMONDS}A"]
## list of kings
DECK_KING = [f"{CLUBS}K", f"{SPADES}K", f"{HEARTS}K", f"{DIAMONDS}K"]
## list of queens
DECK_QUEEN = [f"{CLUBS}Q", f"{SPADES}Q", f"{HEARTS}Q", f"{DIAMONDS}Q"]
## list of jacks
DECK_JACK = [f"{CLUBS}J", f"{SPADES}J", f"{HEARTS}J", f"{DIAMONDS}J"]
## list of tens
DECK_TEN = [f"{CLUBS}10", f"{SPADES}10", f"{HEARTS}10", f"{DIAMONDS}10"]
## list of nines
DECK_NINE = [f"{CLUBS}9", f"{SPADES}9", f"{HEARTS}9", f"{DIAMONDS}9"]
## list of clubs
DECK_CLUBS = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9"]
## list of spades
DECK_SPADES = [f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}J", f"{SPADES}10", f"{SPADES}9"]
## list of hearts
DECK_HEARTS = [f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}J", f"{HEARTS}10", f"{HEARTS}9"]
## list of diamonds
DECK_DIAMONDS = [f"{DIAMONDS}A", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9"]
## order of trump when clubs is trump
DECK_CLUBS_TRUMP = [f"{CLUBS}J", f"{SPADES}J", f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9"]
## order of trump when spades is trump
DECK_SPADES_TRUMP = [f"{SPADES}J", f"{CLUBS}J", f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9"]
## order of trump when hearts is trump
DECK_HEARTS_TRUMP = [f"{HEARTS}J", f"{DIAMONDS}J", f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10",
                     f"{HEARTS}9"]
## order of trump when diamonds is trump
DECK_DIAMONDS_TRUMP = [f"{DIAMONDS}J", f"{HEARTS}J", f"{DIAMONDS}A", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}10",
                       f"{DIAMONDS}9"]
## list of clubs when spades is trump (no jack)
DECK_CLUBS_SPADES_TRUMP = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9"]
## list of spades when clubs is trump (no jack)
DECK_SPADES_CLUBS_TRUMP = [f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9"]
## list of hearts when diamonds is trump (no jack)
DECK_HEARTS_DIAMONDS_TRUMP = [f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10", f"{HEARTS}9"]
## list of diamonds when hearts is trump (no jack)
DECK_DIAMONDS_HEARTS_TRUMP = [f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}10", f"{DIAMONDS}9"]
CLUBS_TRUMP_ORDER = [f"{CLUBS}J", f"{SPADES}J", f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9",
                     f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9", f"{HEARTS}A", f"{HEARTS}K",
                     f"{HEARTS}Q", f"{HEARTS}J", f"{HEARTS}10", f"{HEARTS}9", f"{DIAMONDS}A", f"{DIAMONDS}K",
                     f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9", None]
SPADES_TRUMP_ORDER = [f"{SPADES}J", f"{CLUBS}J", f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9",
                      f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9", f"{HEARTS}A", f"{HEARTS}K",
                      f"{HEARTS}Q", f"{HEARTS}J", f"{HEARTS}10", f"{HEARTS}9", f"{DIAMONDS}A", f"{DIAMONDS}K",
                      f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9", None]
HEARTS_TRUMP_ORDER = [f"{HEARTS}J", f"{SPADES}J", f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10", f"{HEARTS}9",
                      f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9", f"{SPADES}A",
                      f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9", f"{DIAMONDS}A", f"{DIAMONDS}K",
                      f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9", None]
DIAMONDS_TRUMP_ORDER = [f"{DIAMONDS}J", f"{HEARTS}J", f"{DIAMONDS}A", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}10",
                        f"{DIAMONDS}9", f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9",
                        f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}J", f"{SPADES}10", f"{SPADES}9",
                        f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10", f"{HEARTS}9", None]

##Set up decks
## Set up shuffled deck
shuffled_deck = list(DECK)
random.shuffle(shuffled_deck)

player = shuffled_deck[:5]
cpu1 = shuffled_deck[5:10]
cpu2 = shuffled_deck[10:15]
cpu3 = shuffled_deck[15:20]
kitty = shuffled_deck[20:]


##Used to update the turn and deal counters
def change_turn():
    turn_order.insert(3, turn_order.pop(0))


def change_deal():
    deal_order.insert(3, deal_order.pop(0))


def suit(card, trump):
    ## If card is not a jack
    if card not in DECK_JACK:
        ##If card is in Clubs
        if card in DECK_CLUBS:
            return CLUBS
        ##If card is in Spades
        elif card in DECK_SPADES:
            return SPADES
        ##If card is in Hearts
        elif card in DECK_HEARTS:
            return HEARTS
        ##If card it in Diamonds
        else:
            return DIAMONDS
    ## If card is a jack
    else:
        if card in DECK_CLUBS:
            if trump == SPADES:
                return SPADES
            else:
                return CLUBS
        elif card in DECK_SPADES:
            if trump == CLUBS:
                return CLUBS
            else:
                return SPADES
        elif card in DECK_HEARTS:
            if trump == DIAMONDS:
                return DIAMONDS
            else:
                return HEARTS
        else:
            if trump == HEARTS:
                return HEARTS
            else:
                return DIAMONDS

## determine if a card is trump - Marika
def trump_check(card, trump):
    if trump == CLUBS:
        return card in DECK_CLUBS_TRUMP
    elif trump == SPADES:
        return card in DECK_SPADES_TRUMP
    elif trump == HEARTS:
        return card in DECK_HEARTS_TRUMP
    else:
        return card in DECK_DIAMONDS_TRUMP

def highest_card(trump, lead):
    largest_card = 25
    for cards in laid_cards:
        if suit(cards, trump) == trump or suit(cards, trump) == lead:
            if trump == CLUBS:
                value = CLUBS_TRUMP_ORDER.index(cards)
            elif trump == SPADES:
                value = SPADES_TRUMP_ORDER.index(cards)
            elif trump == HEARTS:
                value = HEARTS_TRUMP_ORDER.index(cards)
            else:
                value = DIAMONDS_TRUMP_ORDER.index(cards)
            if value < largest_card:
                largest_card = value
        else:
            largest_card = largest_card
    return CLUBS_TRUMP_ORDER[largest_card]


## check for valid play from player if clubs laid (follow suit) - Marika
def player_follow_suit_clubs(hand, trump, card):
    if trump == CLUBS:
        if card in DECK_CLUBS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_CLUBS_TRUMP:
                    return False
                index = index + 1
            return True
    elif trump == SPADES:
        if card in DECK_CLUBS_SPADES_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_CLUBS_SPADES_TRUMP:
                    return False
                index = index + 1
            return True
    else:
        if card in DECK_CLUBS:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_CLUBS:
                    return False
                index = index + 1
            return True


## check for valid play from player if spades laid (follow suit) - Marika
def player_follow_suit_spades(hand, trump, card):
    if trump == SPADES:
        if card in DECK_SPADES_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_SPADES_TRUMP:
                    return False
                index = index + 1
            return True
    elif trump == CLUBS:
        if card in DECK_SPADES_CLUBS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_SPADES_CLUBS_TRUMP:
                    return False
                index = index + 1
            return True
    else:
        if card in DECK_SPADES:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_SPADES:
                    return False
                index = index + 1
            return True


## check for valid play from player if hearts laid (follow suit) - Marika
def player_follow_suit_hearts(hand, trump, card):
    if trump == HEARTS:
        if card in DECK_HEARTS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_HEARTS_TRUMP:
                    return False
                index = index + 1
            return True
    elif trump == DIAMONDS:
        if card in DECK_HEARTS_DIAMONDS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_HEARTS_DIAMONDS_TRUMP:
                    return False
                index = index + 1
            return True
    else:
        if card in DECK_HEARTS:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_HEARTS:
                    return False
                index = index + 1
            return True


## check for valid play from player if diamonds laid (follow suit) - Marika
def player_follow_suit_diamonds(hand, trump, card):
    if trump == DIAMONDS:
        if card in DECK_DIAMONDS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_DIAMONDS_TRUMP:
                    return False
                index = index + 1
            return True
    elif trump == SPADES:
        if card in DECK_DIAMONDS_HEARTS_TRUMP:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_DIAMONDS_HEARTS_TRUMP:
                    return False
                index = index + 1
            return True
    else:
        if card in DECK_DIAMONDS:
            return True
        else:
            index = 0
            while index < len(hand):
                if hand[index] in DECK_DIAMONDS:
                    return False
                index = index + 1
            return True


## check if player can lay card chosen or must follow suit - Marika
def valid_player_card(hand, trump, lead, card):
    if lead == CLUBS:
        return player_follow_suit_clubs(hand, trump, card)
    if lead == SPADES:
        return player_follow_suit_spades(hand, trump, card)
    if lead == HEARTS:
        return player_follow_suit_hearts(hand, trump, card)
    if lead == DIAMONDS:
        return player_follow_suit_diamonds(hand, trump, card)


def player_lay_card(lead):
    print(player)
    card_choice = input(f"Which card would you like to play? ")
    try:
        valid_card_choice = int(card_choice)

        if valid_card_choice <= len(player):
            if valid_card_choice == 1 and valid_player_card(player, trump, lead, player[0]):
                print(f"You played {player[0]}")
                laid_cards.append(player.pop(0))
            elif valid_card_choice == 2 and valid_player_card(player, trump, lead, player[1]):
                print(f"You played {player[1]}")
                laid_cards.append(player.pop(1))
            elif valid_card_choice == 3 and valid_player_card(player, trump, lead, player[2]):
                print(f"You played {player[2]}")
                laid_cards.append(player.pop(2))
            elif valid_card_choice == 4 and valid_player_card(player, trump, lead, player[3]):
                print(f"You played {player[3]}")
                laid_cards.append(player.pop(3))
            elif valid_card_choice == 5 and valid_player_card(player, trump, lead, player[4]):
                print(f"You played {player[4]}")
                laid_cards.append(player.pop(4))
            else:
                print(f"You must follow suit with {lead}")
                player_lay_card(lead)
        else:
            print("You can not play that.")
            player_lay_card(lead)
    except:
        player_lay_card(lead)


def player_lead_card():
    print(player)
    card_choice = input(f"Which card would you like to lead? ")
    try:
        valid_card_choice = int(card_choice)

        if valid_card_choice <= len(player):
            if valid_card_choice == 1:
                print(f"You lead {player[0]}")
                laid_cards.append(player.pop(0))
            elif valid_card_choice == 2:
                print(f"You lead {player[1]}")
                laid_cards.append(player.pop(1))
            elif valid_card_choice == 3:
                print(f"You lead {player[2]}")
                laid_cards.append(player.pop(2))
            elif valid_card_choice == 4:
                print(f"You lead {player[3]}")
                laid_cards.append(player.pop(3))
            else:
                print(f"You lead {player[4]}")
                laid_cards.append(player.pop(4))
        else:
            print("You can not play that.")
            player_lead_card()
    except:
        player_lead_card()


## find lowest card in hand of any suit, including trump decks - Marika
def lowest_card_in_hand(hand, suit_deck):
    index = len(suit_deck) - 1
    while index >= 0:
        if suit_deck[index] in hand:
            return suit_deck[index]
        else:
            index = index - 1
    return False


## find highest card in hand of any suit, including trump decks - Marika
def highest_card_in_hand(hand, suit_deck):
    index = 0
    while index < len(suit_deck):
        if suit_deck[index] in hand:
            return suit_deck[index]
        else:
            index = index + 1
    return False


## find a card of a certain number in hand - Marika
def number_card_in_hand(hand, number_deck):
    index = 0
    while index < len(number_deck):
        if number_deck[index] in hand:
            return number_deck[index]
        else:
            index = index + 1
    return False


## determine what card a bot should play if clubs is trump and they have to follow suit - Marika
def bot_card_clubs_trump(hand, lead):
    if lead == CLUBS:
        if lowest_card_in_hand(hand, DECK_CLUBS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_CLUBS_TRUMP)
    elif lead == SPADES:
        if highest_card_in_hand(hand, DECK_SPADES_CLUBS_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_SPADES_CLUBS_TRUMP)
    elif lead == HEARTS:
        if highest_card_in_hand(hand, DECK_HEARTS) != False:
            return highest_card_in_hand(hand, DECK_HEARTS)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_DIAMONDS) != False:
            return highest_card_in_hand(hand, DECK_DIAMONDS)
    if highest_card_in_hand(hand, DECK_CLUBS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_CLUBS_TRUMP)
    else:
        return False


## determine what card a bot should play if spades is trump and they have to follow suit - Marika
def bot_card_spades_trump(hand, lead):
    if lead == SPADES:
        if lowest_card_in_hand(hand, DECK_SPADES_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_SPADES_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS_SPADES_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_CLUBS_SPADES_TRUMP)
    elif lead == HEARTS:
        if highest_card_in_hand(hand, DECK_HEARTS) != False:
            return highest_card_in_hand(hand, DECK_HEARTS)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_DIAMONDS) != False:
            return highest_card_in_hand(hand, DECK_DIAMONDS)
    if highest_card_in_hand(hand, DECK_SPADES_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_SPADES_TRUMP)
    else:
        return False


## determine what card a bot should play if hearts is trump and they have to follow suit - Marika
def bot_card_hearts_trump(hand, lead):
    if lead == HEARTS:
        if lowest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_HEARTS_TRUMP)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_DIAMONDS_HEARTS_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_DIAMONDS_HEARTS_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS) != False:
            return highest_card_in_hand(hand, DECK_CLUBS)
    elif lead == SPADES:
        if highest_card_in_hand(hand, DECK_SPADES) != False:
            return highest_card_in_hand(hand, DECK_SPADES)
    if highest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_HEARTS_TRUMP)
    else:
        return False


## determine what card a bot should play if diamonds is trump and they have to follow suit - Marika
def bot_card_diamonds_trump(hand, lead):
    if lead == DIAMONDS:
        if lowest_card_in_hand(hand, DECK_DIAMONDS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_DIAMONDS_TRUMP)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_HEARTS_DIAMONDS_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_HEARTS_DIAMONDS_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS) != False:
            return highest_card_in_hand(hand, DECK_CLUBS)
    elif lead == SPADES:
        if highest_card_in_hand(hand, DECK_SPADES) != False:
            return highest_card_in_hand(hand, DECK_SPADES)
    if highest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_HEARTS_TRUMP)
    else:
        return False


## if the bot doesn't have to follow suit and cannot trump, lay their lowest offsuit card - Marika
def bot_lay_offsuit_card(hand):
    if number_card_in_hand(hand, DECK_NINE) != False:
        return number_card_in_hand(hand, DECK_NINE)
    elif number_card_in_hand(hand, DECK_TEN) != False:
        return number_card_in_hand(hand, DECK_TEN)
    elif number_card_in_hand(hand, DECK_JACK) != False:
        return number_card_in_hand(hand, DECK_JACK)
    elif number_card_in_hand(hand, DECK_QUEEN) != False:
        return number_card_in_hand(hand, DECK_QUEEN)
    elif number_card_in_hand(hand, DECK_KING) != False:
        return number_card_in_hand(hand, DECK_KING)
    else:
        return number_card_in_hand(hand, DECK_ACE)


## bot card to lay when they don't lead - Marika
def bot_choose_card_to_lay(hand, trump, lead):
    if trump == CLUBS:
        if bot_card_clubs_trump(hand, lead) != False:
            return bot_card_clubs_trump(hand, lead)
    if trump == SPADES:
        if bot_card_spades_trump(hand, lead) != False:
            return bot_card_spades_trump(hand, lead)
    if trump == HEARTS:
        if bot_card_hearts_trump(hand, lead) != False:
            return bot_card_hearts_trump(hand, lead)
    if trump == DIAMONDS:
        if bot_card_diamonds_trump(hand, lead) != False:
            return bot_card_diamonds_trump
    return bot_lay_offsuit_card(hand)


## determine if the bot has the right bower in hand - Marika
def bot_lead_right(hand, trump):
    if trump == CLUBS:
        if DECK_CLUBS_TRUMP[0] in hand:
            return DECK_CLUBS_TRUMP[0]
    elif trump == SPADES:
        if DECK_SPADES_TRUMP[0] in hand:
            return DECK_SPADES_TRUMP[0]
    elif trump == HEARTS:
        if DECK_HEARTS_TRUMP[0] in hand:
            return DECK_HEARTS_TRUMP[0]
    elif trump == DIAMONDS:
        if DECK_DIAMONDS_TRUMP[0] in hand:
            return DECK_DIAMONDS_TRUMP[0]
    return False


## determine what the highest trump not played is and if it's in hand - Marika
def bot_lead_highest_trump_in_play(hand, trump):
    if trump == CLUBS:
        highest_trump = highest_card_in_hand(hand, DECK_CLUBS_TRUMP)
        index = 0
        while DECK_CLUBS_TRUMP[index] != highest_trump:
            if DECK_CLUBS_TRUMP[index] in all_laid_cards:
                index = index + 1
            else:
                return False
        return highest_trump
    if trump == SPADES:
        highest_trump = highest_card_in_hand(hand, DECK_SPADES_TRUMP)
        index = 0
        while DECK_SPADES_TRUMP[index] != highest_trump:
            if DECK_SPADES_TRUMP[index] in all_laid_cards:
                index = index + 1
            else:
                return False
        return highest_trump
    if trump == HEARTS:
        highest_trump = highest_card_in_hand(hand, DECK_HEARTS_TRUMP)
        index = 0
        while DECK_HEARTS_TRUMP[index] != highest_trump:
            if DECK_HEARTS_TRUMP[index] in all_laid_cards:
                index = index + 1
            else:
                return False
        return highest_trump
    if trump == DIAMONDS:
        highest_trump = highest_card_in_hand(hand, DECK_DIAMONDS_TRUMP)
        index = 0
        while DECK_DIAMONDS_TRUMP[index] != highest_trump:
            if DECK_DIAMONDS_TRUMP[index] in all_laid_cards:
                index = index + 1
            else:
                return False
        return highest_trump


## determine if the bot has an offsuit ace in hand - Marika
def bot_lead_offsuit_ace(hand, trump):
    index = 0
    while index < 4:
        card = DECK_ACE[index]
        if (card in hand) and (trump_check(card, trump) != True):
            return DECK_ACE[index]
        index = index + 1
    return False


## bot card to lay when leading - Marika
def bot_choose_card_to_lead(hand, trump):
    if bot_lead_right(hand, trump) != False:
        return bot_lead_right(hand, trump)
    elif bot_lead_highest_trump_in_play(hand, trump) != False:
        return bot_lead_highest_trump_in_play(hand, trump)
    elif bot_lead_offsuit_ace(hand, trump) != False:
        return bot_lead_offsuit_ace(hand, trump)
    else:
        card = bot_lay_offsuit_card(hand)
        while trump_check(card, trump) == True:
            hand.remove(card)
            card = bot_lay_offsuit_card(hand)
        return card


## Intial turn and deal order
turn_order = ["player", "cpu1", "cpu2", "cpu3"]
deal_order = ["player", "comp1", "comp2", "comp3"]


player_team_points = 0
bot_team_points = 0
all_laid_cards = []
laid_cards = []




def play_round():
    laid_cards = []
    player_team_points = 0
    bot_team_points = 0
    counter = 0
    while counter < 5:
        print(cpu1)
        print(cpu2)
        print(cpu3)
        if turn_order[0] == "player":
            player_card = player_lead_card()
            laid_cards.append(player_card)
        elif turn_order[0] == "cpu1":
            cpu1_card = bot_choose_card_to_lead(cpu1, trump)
            laid_cards.append(cpu1_card)
            cpu1.remove(cpu1_card)
            print(f"Computer 1 lead {cpu1_card}")
        elif turn_order[0] == "cpu2":
            cpu2_card = bot_choose_card_to_lead(cpu2, trump)
            laid_cards.append(cpu2_card)
            cpu2.remove(cpu2_card)
            print(f"Computer 2 lead {cpu2_card}")
        else:
            cpu3_card = bot_choose_card_to_lead(cpu3, trump)
            laid_cards.append(cpu3_card)
            cpu3.remove(cpu3_card)
            print(f"Computer 3 lead {cpu3_card}")
        change_turn()
        lead = suit(laid_cards[0], trump)
        print(f"{lead} has been lead")
        count = 0
        while count < 3:
            if turn_order[0] == "player":
                player_card = player_lay_card(lead)
                change_turn()
            elif turn_order[0] == "cpu1":
                cpu1_card = bot_choose_card_to_lay(cpu1, trump, lead)
                print(f"Computer 1 played {cpu1_card}")
                laid_cards.append(cpu1_card)
                cpu1.remove(cpu1_card)
                change_turn()

            elif turn_order[0] == "cpu2":
                cpu2_card = bot_choose_card_to_lay(cpu2, trump, lead)
                print(f"Computer 2 played {cpu2_card}")
                laid_cards.append(cpu2_card)
                cpu2.remove(cpu2_card)
                change_turn()
            else:
                cpu3_card = bot_choose_card_to_lay(cpu3, trump, lead)
                print(f"Computer 3 played {cpu3_card}")
                laid_cards.append(cpu3_card)
                cpu3.remove(cpu3_card)
                change_turn()
            count = count + 1
        winning_card = highest_card(trump, lead)
        if player_card == winning_card:
            print("You won the trick")
            player_team_points = player_team_points + 1
        elif cpu1_card == winning_card:
            print("Computer 1 won the trick")
            bot_team_points = bot_team_points + 1
        elif cpu2_card == winning_card:
            print("Computer 2 won the trick")
            player_team_points = player_team_points + 1
        elif cpu3_card == winning_card:
            print("Computer 3 won the trick")
            bot_team_points = bot_team_points + 1
        print(player_team_points)
        print(bot_team_points)
        all_laid_cards.append(laid_cards)
        laid_cards = []
        count = count + 1





play_round()


print(laid_cards)
