import random

CLUBS = "\u2663"
SPADES = "\u2660"
HEARTS = "\u2665"
DIAMONDS = "\u2666"

DECK = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9", f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}J", f"{SPADES}10", f"{SPADES}9", f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}J", f"{HEARTS}10", f"{HEARTS}9", f"{DIAMONDS}A", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9"]
DECK_ACE = [f"{CLUBS}A", f"{SPADES}A", f"{HEARTS}A", f"{DIAMONDS}A"]
DECK_KING = [f"{CLUBS}K", f"{SPADES}K", f"{HEARTS}K", f"{DIAMONDS}K"]
DECK_QUEEN = [f"{CLUBS}Q", f"{SPADES}Q", f"{HEARTS}Q", f"{DIAMONDS}Q"]
DECK_JACK = [f"{CLUBS}J", f"{SPADES}J", f"{HEARTS}J", f"{DIAMONDS}J"]
DECK_TEN = [f"{CLUBS}10", f"{SPADES}10", f"{HEARTS}10", f"{DIAMONDS}10"]
DECK_NINE = [f"{CLUBS}9", f"{SPADES}9", f"{HEARTS}9", f"{DIAMONDS}9"]
DECK_CLUBS = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}J", f"{CLUBS}10", f"{CLUBS}9"]
DECK_SPADES = [f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}J", f"{SPADES}10", f"{SPADES}9"]
DECK_HEARTS = [f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}J", f"{HEARTS}10", f"{HEARTS}9"]
DECK_DIAMONDS = [f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}J", f"{DIAMONDS}10", f"{DIAMONDS}9"]
DECK_CLUBS_TRUMP = [f"{CLUBS}J", f"{SPADES}J", f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9"] 
DECK_SPADES_TRUMP = [f"{SPADES}J", f"{CLUBS}J", f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9"]
DECK_HEARTS_TRUMP = [f"{HEARTS}J", f"{DIAMONDS}J", f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10", f"{HEARTS}9"]
DECK_DIAMOND_TRUMP = [f"{DIAMONDS}J", f"{HEARTS}J", f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}10", f"{DIAMONDS}9"]
DECK_CLUBS_SPADES_TRUMP = [f"{CLUBS}A", f"{CLUBS}K", f"{CLUBS}Q", f"{CLUBS}10", f"{CLUBS}9"]
DECK_SPADES_CLUBS_TRUMP = [f"{SPADES}A", f"{SPADES}K", f"{SPADES}Q", f"{SPADES}10", f"{SPADES}9"]
DECK_HEARTS_DIAMONDS_TRUMP = [f"{HEARTS}A", f"{HEARTS}K", f"{HEARTS}Q", f"{HEARTS}10", f"{HEARTS}9"]
DECK_DIAMONDS_HEARTS_TRUMP = [f"{DIAMONDS}K", f"{DIAMONDS}Q", f"{DIAMONDS}10", f"{DIAMONDS}9"]

shuffled_deck = list(DECK)
random.shuffle(shuffled_deck)

hand_one = shuffled_deck[:5]
hand_two = shuffled_deck[5:10]
hand_three = shuffled_deck[10:15]
hand_four = shuffled_deck[15:20]
kitty = shuffled_deck[20:]

def farmers_hand (hand):
    count_nine_ten = 0
    index = 0
    while index < 5:
        if (hand[index] in DECK_NINE) or (hand[index] in DECK_TEN):
            count_nine_ten = count_nine_ten + 1
        index = index + 1
    if count_nine_ten >= 4:
        return True
    else:
        return False

def lowest_card_in_hand (hand, suit_deck):
    index = len(suit_deck) - 1
    while index >= 0:
        if suit_deck[index] in hand:
            return suit_deck[index]
        else:
            index = index - 1
    return False
    
def highest_card_in_hand (hand, suit_deck):
    index = 0
    while index < len(suit_deck):
        if suit_deck[index] in hand:
            return suit_deck[index]
        else:
            index = index + 1
    return False
    
def number_card_in_hand (hand, number_deck):
    index = 0
    while index < len(number_deck):
        if number_deck[index] in hand:
            return number_deck[index]
        else:
            index = index + 1
    return False
    
def bot_card_clubs_trump (hand, lead):
    if lead == CLUBS:
        if lowest_card_in_hand(hand, DECK_CLUBS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_CLUBS_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_SPADES_CLUBS_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_SPADES_CLUBS_TRUMP)
    elif lead == HEARTS:
        if highest_card_in_hand(hand, DECK_HEARTS) != False:
            return highest_card_in_hand(hand, DECK_HEARTS)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_DIAMONDS) != False:
            return highest_card_in_hand(hand, DECK_DIAMONDS)
    if highest_card_in_hand(hand, DECK_CLUBS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_CLUBS_TRUMP)
    else:
        return False

def bot_card_spades_trump (hand, lead):
    if lead == SPADES:
        if lowest_card_in_hand(hand, DECK_SPADES_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_SPADES_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS_SPADES_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_CLUBS_SPADES_TRUMP)
    elif lead == HEARTS:
        if highest_card_in_hand(hand, DECK_HEARTS) != False:
            return highest_card_in_hand(hand, DECK_HEARTS)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_DIAMONDS) != False:
            return highest_card_in_hand(hand, DECK_DIAMONDS)
    if highest_card_in_hand(hand, DECK_SPADES_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_SPADES_TRUMP)
    else:
        return False
        
def bot_card_hearts_trump (hand, lead):
    if lead == HEARTS:
        if lowest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_HEARTS_TRUMP)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand,DECK_DIAMONDS_HEARTS_TRUMP) != False:
                return highest_card_in_hand(hand, DECK_DIAMONDS_HEARTS_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS) != False:
            return highest_card_in_hand(hand, DECK_CLUBS)
    elif lead == SPADES:
        if highest_card_in_hand(hand, DECK_SPADES) != False:
            return highest_card_in_hand(hand, DECK_SPADES)
    if highest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_HEARTS_TRUMP)       
    else:
        return False
        
def bot_card_diamonds_trump (hand, lead):
    if lead == DIAMONDS:
        if lowest_card_in_hand(hand, DECK_DIAMONDS_TRUMP) != False:
            return lowest_card_in_hand(hand, DECK_DIAMONDS_TRUMP)
    elif lead == DIAMONDS:
        if highest_card_in_hand(hand, DECK_HEARTS_DIAMONDS_TRUMP) != False:
            return highest_card_in_hand(hand, DECK_HEARTS_DIAMONDS_TRUMP)
    elif lead == CLUBS:
        if highest_card_in_hand(hand, DECK_CLUBS) != False:
            return highest_card_in_hand(hand, DECK_CLUBS)
    elif lead == SPADES:
        if highest_card_in_hand(hand, DECK_SPADES) != False:
            return highest_card_in_hand(hand, DECK_SPADES)
    if highest_card_in_hand(hand, DECK_HEARTS_TRUMP) != False:
        return highest_card_in_hand(hand, DECK_HEARTS_TRUMP)    
    else:
        return False

def bot_lay_offsuit_card (hand):
    if number_card_in_hand(hand, DECK_NINE) != False:
        return number_card_in_hand(hand, DECK_NINE)
    elif number_card_in_hand(hand, DECK_TEN) != False:
        return number_card_in_hand(hand, DECK_TEN)
    elif number_card_in_hand(hand, DECK_JACK) != False:
        return number_in_hand(hand, DECK_JACK)
    elif number_card_in_hand(hand, DECK_QUEEN) != False:
        return number_card_in_hand(hand, DECK_QUEEN)
    elif number_card_in_hand(hand, DECK_KING) != False:
        return number_card_in_hand(hand, DECK_KING)
    else:
        return number_card_in_hand(hand, DECK_ACE)
        
def bot_choose_card_to_lay (hand, trump, lead):
    if trump == CLUBS:
        if bot_card_clubs_trump(hand, lead) != False:
            return bot_card_clubs_trump(hand, lead)
    if trump == SPADES:
        if bot_card_spades_trump(hand, lead) != False:
            return bot_card_spades_trump(hand, lead)
    if trump == HEARTS:
        if bot_card_hearts_trump(hand, lead) != False:
            return bot_card_hearts_trump(hand, lead)
    if trump == DIAMONDS:
        if bot_card_diamonds_trump(hand, lead) != False:
            return bot_card_diamonds_trump
    return bot_lay_offsuit_card(hand)
